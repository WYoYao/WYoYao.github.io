---
layout: post
title: webpack 实现基本功能
subtitle: 自己的学习笔记
date: 2016-05-27T00:00:00.000Z
author: WYY
header-img: "img/Coder.jpg"
catalog: true
tags:
  - React
  - webpack
---
# webpack 实现基本功能
### 初始化项目
>创建文件夹
>初始化git 仓库
>添加README.md 文件和git 忽略文件
>初始化npm 包


```
$ mkdir webpack-demos && cd webpack-demos
$ git init
$ touch README.md .gitignore
$ npm init
```

>向.gitignore 添加需要被忽略的文件

```
node_modules
*.log*
.idea
```

>搭建基本的项目结构
>创建两个文件夹
>src 存放源码 build 存放打包之后的资源文件


```
mkdir src build
cd src
touch index.js component.js
cd ../build && touch index.html
```

>向源码文件中添加代码
> src/index.js


```
/* src/index.js */
var component = require('./component.js');
component();
```
```
/* src/component.js */
module.exports = function(){
  alert('component');
}
```
```
/* build/index.html */
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Webpack demos</title>
</head>
<body>
  <div id="app"></div>
  <script src="bundle.js"></script>
</body>
</html>
```

### 安装需要的依赖包
> 安装并保存在项目的依赖中


```
$ npm install --save-dev webpack webpack-dev-server
```

> 创建配置文件webpack.config.js


```
touch webpack.config.js
```

> 请注意webpack.config.js这个文件命名，默认情况下需要严格按照这个命名，不然会报Output filename not configured的错误；另外，如果不按这个命名，那么在webpack运行的时候通过--config 这个参数指定配置文件，比如：webpack --config config .js

> 对配置文件进行基本的配置

```
var path = require('path');

module.exports = {
    entry:path.resolve(__dirname,'src/index.js'),
    output: {
        path: path.resolve(__dirname, 'build'),
        filename: 'bundle.js'
    },
};
```

> 执行webpack命令,控制台出现如下内容

```
Hash: cf7cc9272c664f542fcb
Version: webpack 1.13.0
Time: 80ms
    Asset     Size  Chunks             Chunk Names
bundle.js  2.04 kB       0  [emitted]  main
   [0] ./src/index.js 60 bytes {0} [built]
   [1] ./src/component.js 57 bytes {0} [built]
    + 1 hidden modules
```
> build目录下也新增了一个bundle.js文件

### webpack 的基本命令
```
$ webpack --help
```
>- webpack 开发环境下编译
>- webpack -p 产品编译及压缩
>- webpack --watch 开发环境下持续的监听文件变动来进行编译
>- webpack -d 引入 source maps
>- webpack --progress 显示构建进度
>- webpack --display-error-details 这个很有用，显示打包过程中的出错信息
>- webpack --profile 输出性能数据，可以看到每一步的耗时

```
webpack-dev-server --progress --colors --content-base build
```
> 关于webpack-dev-server的简单介绍：webpack-dev-server是一个小型的node.js Express服务器,它使用webpack-dev-middleware中间件来为通过webpack打包生成的资源文件提供Web服务。它还有一个通过Socket.IO连接着webpack-dev-server服务器的小型运行时程序。webpack-dev-server发送关于编译状态的消息到客户端，客户端根据消息作出响应。

> 上面参数的几个意思
> - webpack-dev-server 建立一个web服务器
> - webpack-dev-server --devtool eval 为你的代码创建源地址。当有任何报错的时候可以让你更加精确地定位到文件和行号
> - webpack-dev-server --progress - 显示合并代码进度
>- webpack-dev-server --colors - 命令行中显示颜色
>- webpack-dev-server --content-base build - webpack-dev-server服务会默认以当前目录伺服文件，如果设置了content-base的话，服务的根路径则为build目录
>- webpack-dev-server --inline 可以自动加上dev-server的管理代码，实现热更新
>- webpack-dev-server --hot 开启代码热替换，可以加上HotModuleReplacementPlugin
>- webpack-dev-server --port 3000 设置服务端口

### 创建多文件入口

```
cd src && touch entry1.js entry2.js
```
> 修改webpack.config.js 配置文件中的内容
> 最后生成的文件名是entry的key


```
/* webpack.config.js */
var path = require('path');
module.exports = {
    entry: {
      entry1: './src/entry1.js',
      entry2: './src/entry2.js',
    },
    output: {
        path: path.resolve(__dirname, 'build'),
        //name 对应的是上面的entry1，entry2
        filename: '[name].js'
    },
};
```

> 然后执行webpack -p 进行编译


```
webpack -p
```
> 会发现build 目录中会出现与src 中文件名对应的编译文件，因为在配置文件中name通过变量赋值的会自动生成

### 使用Babel-loader 来解析ES6 和JSX语法

> 修改index.js 中的内容

```
'use strict';
//ES6的解构赋值
import React, { Component } from 'react';
import ReactDOM from 'react-dom';

class HelloWorld extends Component {
  render(){
  //使用JSX语法
    return (
      <h1>Hello world</h1>
    )
  }
}
//将组件附加到#app 中
ReactDOM.render(<HelloWorld />,document.getElementById('app'));
```

> 下载需要依赖的包，接下来我们用到了react 和react-dom.js 先下载这两个包


```
$ npm install --save react react-dom
```
> 下载并配置Babel 用来解析ES6和JSX语法
> <a href="http://wyoyao.github.io/2016/04/08/js-babel/">更多Babel 信息</a>


```
npm install babel-loader babel-core --save-dev
```

> 安装成功之后需要配置webpack.config.js 配置文件


```
var path = require('path');

module.exports = {
    entry: path.resolve(__dirname, 'src/index.js'),
    output: {
        path: path.resolve(__dirname, 'build'),
        filename: 'bundle.js',
    },
    module: {
      loaders: [
        {
          //通过正则匹配到js 文件
          test: /\.js$/,
          //指定babel-loader 来解析匹配到的文件
          //如果有多个loader的时候需要将loader修改为loaders:值应该修改成为一个数组
          loader: 'babel-loader'
        }
      ]
    }
};

```

> 上面在webpack.config.js 中指定了 babel-loader 来解析 .js 文件，但是我们并没有对Babel 进行相关的配置(接下来，我们需要对Babel进行配置)

> 添加.babelrc (Babel 的配置文件)


```
touch .babelrc
```

> 添加.babelrc 文件中内容如下
> 设置Babel 的预设 和控件


```
{
  "presets": ["es2015", "react", "stage-0"],
  "plugins": []
}
```
> 上述配置中选择的es2015，react，stage-0 三个预设
> 接下来安装这三个预设


```
$ npm install --save-dev babel-preset-es2015 babel-preset-react babel-preset-stage-0
```

> 接下来执行编译命令


```
webpack-dev-server --progress --colors --content-base build
```
> 打开[页面](http://localhost:8080/) 可以访问我们的build文件夹下面的 index.html页面

### 配置webpack.config.js 中的devServer
> 之前我们在执行wabpack-dev-devserver的时候在后面添加了很多的配置参数
> 接下来我们把他们配置到webpack.config.js 配置文件中,
> 配置后的整个代码如下


```
var path = require('path');

module.exports = {
    entry: path.resolve(__dirname, 'src/index.js'),
    output: {
        path: path.resolve(__dirname, 'build'),
        filename: 'bundle.js',
    },
    module: {
      loaders: [
        {
          test: /\.js$/,
          loader: 'babel-loader'
        }
      ]
    },
    //节省下之前命令行里面写的配置参数
    devServer:{
        //显示进度
        progress:true,
        //文件根目录
        contentBase:'build',
        //编译的时候显示颜色
        stats:{colors:true},
        //实现热替换
        inline:true,
        //虚拟目录。调用JS的地址也需要修改
        publicPath:'/static/'
        // //实现热替换
        // hot:true
    }
};
```

> 在devServer 里面我们配置了publicPath 属性
> 所以后面引用devServer创建的Expresss服务器的时候都需要添加/static/ 这个虚拟路径

### 使用webpack-dev-server mock 数据
> 下面开始使用webpack-dev-server 模拟接口中的数据
> 首先创建一个保存数据的json文件


> ```
> cd build/
> touch test.json
> ```
> 在test.json 文件下面添加数据


> ```
> {
> "name":"王有药"
> }
> ```
> 后面修改我们的webpack.config.js的配置文件，修改后的代码如下


```
var path = require('path');

function rewriteUrl(replacePath) {
  return function (req, opt) {
    var queryIndex = req.url.indexOf('?');
    var query = queryIndex >= 0 ? req.url.substr(queryIndex) : "";

    req.url = req.path.replace(opt.path, replacePath) + query;
    console.log("rewriting ", req.originalUrl, req.url);
  };
}

module.exports = {
    entry: path.resolve(__dirname, 'src/index.js'),
    output: {
        path: path.resolve(__dirname, 'build'),
        filename: 'bundle.js',
    },
    module: {
      loaders: [
        {
          test: /\.js$/,
          loader: 'babel-loader'
        }
      ]
    },
    //节省下之前命令行里面写的配置参数
    devServer:{
        //显示进度
        progress:true,
        //文件根目录
        contentBase:'build',
        //编译的时候显示颜色
        stats:{colors:true},
        //实现热替换
        inline:true,
        //虚拟目录。调用JS的地址也需要修改
        publicPath:'/static/',
        resolve:{
          extension:[],
          alias:{}
        }
        proxy: [
          {
            //正则 /api/*
            path: /^\/api\/(.*)/,
            target: "http://localhost:8080/",
            rewrite: rewriteUrl('/$1\.json'),
            changeOrigin: true
          }
       ]
        // //实现热替换
        // hot:true
    }
};
```

### resolve 的用法
> resolve下常用的是extension(扩展)和alias(别名)段的配置
> extension(扩展)
> 在webpack.config.js 中添加如下配置
> 下面配置的效果是省略在require 和import的时候添加文件后缀


> ```
> resolve: {
>    extensions: ["", ".js", ".jsx", ".css", ".json"]
> }
> ```
> 接下来进行实践测试
> 修改component.js
> ```
> export default () => {
 > alert('component');
>}
> ```


> 修改index.js 的文件内容


```
/* src/index.js */
'use strict';

import React, { Component } from 'react';
import ReactDOM from 'react-dom';
//这个时候引用component.js 的时候就不用使用component.js 加后缀进行使用了
import component from './component';

component();

class HelloWorld extends Component {
  render(){
    return (
      <h1>Hello world</h1>
    )
  }
}

ReactDOM.render(<HelloWorld />, document.getElementById('app'));
```

### 解析前端资源
> 前端会使用到的资源
>- js：使用babel-loader
>- 模版: html ejs handlebars
>- css:less stylus sass css-loader,stylus-loader
>- img:png gif jpg
>- 图标字体：tff eot woff2 svg
>- json
>通过不同的loader 对他们执行编译

> 暂且约定使用less预处理器（saas的类似）来写项目的样式
> 1.添加解析文件的预设


```
$ npm install --save-dev style-loader css-loader less-loader
```
> 创建对应的文件


```
cd src && mkdir components
cd components && mkdir Button
cd Button && touch Button.js Button.less
```


> 下面添加内容
> Button.js代码：


```
import React, { Component } from 'react';

class Button extends Component {
  handleClick(){
    alert('戳我干嘛！');
  }
  render(){
    const style = require('./Button');

    return (
      <button className="my-button" onClick={this.handleClick.bind(this)}>
        快戳我
      </button>
    );
  }
}

export default Button;
```
> Button.less代码：


```
.my-button {
  color: #fff;
  background-color: #2db7f5;
  border-color: #2db7f5;
  padding: 4px 15px 5px 15px;
  font-size: 14px;
  border-radius: 6px;
}
```
> index.js 代码：


```
'use strict';
import React from 'react';
import ReactDOM from 'react-dom';
//这里注意，如果上面添加了extension的时候这个地方不要添加后缀名
}
import Button from './components/Button/Button';

let root = document.getElementById('app');
ReactDOM.render( <Button />, root );

```
> 然后执行编译
> npm run dev
### 调试配置
> 修改webpack.config.js 在其中添加devtool字段，设置其值为cheap-module-source-map，这样我们就可以在浏览器中调试我们的代码


|devtool|buildspeed|rebuildspeed|productionsupported|quality|
|:-|:-:|:-:|:-:|:-:|
|eval|	+++|+++|	no|	generated code|
|cheap-eval-source-map|	+|++	|no	|transformed code (lines only)|
|cheap-source-map|	+|o	|yes	|transformed code (lines only)|
|cheap-module-eval-source-map|o|++|	no	|original source (lines only)|
|cheap-module-source-map|o|-	|yes	|original source (lines only)|
|eval-source-map|	–|+	|no|	original source|
|source-map|	–|–|	yes	|original source|

> 接下来就可以在浏览器中的webpack:// 可以看到源码，并可以在源码中进行对应的调试

### 图标字体等资源
> 加载图标字体的加载可以使用file-loader 或 url-loader 进行加载
> 同时也需要修改配置文件


```
{
  test: /\.(woff|woff2|ttf|svg|eot)(\?v=\d+\.\d+\.\d+)?$/,
  loader: "url?limit=10000"
}
```
> 下载对应的图标字体资源(暂时现在bootstrap)


```
npm install bootstrap --save
```
