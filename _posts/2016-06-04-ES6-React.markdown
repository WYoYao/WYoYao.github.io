---
layout:     post
title:      "ES6 React"
subtitle:   "React中ES5 ES6对照表"
date:       2016-06-04
author:     "WYY"
header-img: "img/post-bg-js-module.jpg"
catalog: true
tags:
    - JavaScript
    - ES6
    - React
---

# React/React Native 的ES5 ES6写法对照表   

###1. 引用

>在ES5中使用CommonJS标准，引入React包基本on各国require进行
>ES5代码：

```
//ES5
var React = require("react");
var {
    Component,
    PropTypes
} = React;  //引用React抽象组件

var ReactNative = require("react-native");
var {
    Image,
    Text,
} = ReactNative;  //引用具体的React Native组件
```

>ES6代码，import写法更加的标准
>以下为ES6:

```
import React,{Component,PropTypes} from 'react';
import {
  Image,Text
} from 'react-native';
```

> (注意在React Native里，import直到0.12+才能正常运作。)

### 2.导出单个类
> ES5:

```
//ES5
var MyComponent = React.createClass({
    ...
});
module.exports = MyComponent;
```

> ES6 使用export default来实现相同的功能

```
//ES6
export default class MyComponent extends Component{
    ...
}
```

> 引用的时候也类似

```
//ES5
var MyComponent = require('./MyComponent');

//ES6
import MyComponent from './MyComponent';
```

### 3.定义组件类
> 在ES5里，通常通过React.createClass来定义一个组件类

```
//ES5 通过React.createClass创建类
var Photo =React.createClass({
  render:function() {
      return(
        <Image source={this.props.source} />
      )
  },
});
```

```
//ES6,通过定义一个继承React.Component的class 来定义一个组件类
class Photo extends React.Component {
  render(){
      return(
        <Image source={this.props.source} />
      )
  }
}
```

### 4.给组件定义方法

> 根据第三部分的例子可以看到，给组件定义方法不用在写 “名字：function（）”的写法了，而是直接使用名字+()同时在方法的后面也不用再写逗号了。

```

//ES5的写法
var photo =React.createClass({
  ComponentWillMount:function (){

  },
  render:function () {
      return (
        <Image souce={this.props.source} />
      );
  },
});

```

```
//ES6的写法
class Photo extends React.Component{
  //这里不用 name + “：” +  function + ()
  componentWillMount(){

  }//这里不用逗号
  render(){
    return(
      <Image source={this.props.souce} />
    )
  }
}
```

### 5.定义组件的属性类型和默认属性

> 在ES5里，属性类型和默认属性分别通过propTypes成员和getDefaultProps方法来实现

```
//ES5 中的方法
var Video=React.createClass({
  getDefaultProps:function(){
      return {
        autoPlay: false,
        maxLoops: 10,
      }
  },
  propTypes:{
    autoPlay: React.PropTypes.bool.isRequired,
    maxLoops: React.PropTypes.number.isRequired,
    posterFrameSrc: React.PropTypes.string.isRequired,
    videoSrc: React.PropTypes.string.isRequired,
  },
  render:function () {
      return (
        <View><View />
      )
  }
})

```

> 在ES6中可以统一使用static成员来实现

```
//ES6 中的写法
class Video extends React.Component{
  static defaultProps{
    autoPlay: false,
    maxLoops: 10,
  }; //注意这里是分号
  static propTypes={
    autoPlay: React.PropTypes.bool.isRequired,
    maxLoops: React.PropTypes.number.isRequired,
    posterFrameSrc: React.PropTypes.string.isRequired,
    videoSrc: React.PropTypes.string.isRequired,
  }; //注意这里是分号
  render(){
    return(
      <View />
    )
  }
}
```

> 同事也有人怎么写

```
//ES6
class Video extends React.Component {
    render() {
        return (
            <View />
        );
    }
}
Video.defaultProps = {
    autoPlay: false,
    maxLoops: 10,
};
Video.propTypes = {
    autoPlay: React.PropTypes.bool.isRequired,
    maxLoops: React.PropTypes.number.isRequired,
    posterFrameSrc: React.PropTypes.string.isRequired,
    videoSrc: React.PropTypes.string.isRequired,
};
```

> 对React开发者而言，static成员在IE10及之前版本不能被继承，而在IE11和其它浏览器上可以，这有时候会带来一些问题。React Native开发者可以不用担心这个问题。

### 6. 初始化STATE

> 初始化STATE
> ES5下情况:

```
var Video=React.crateClass({
  getInitialState:function(){
    return {
      loopsRemaining: this.props.maxLoops,
    };
  },
})
```

> ES6 下有两种写法

```
class Video extends React.Component{
  state={
    loopsRemaining: this.props.maxLoops,
  }
}
```

>不过我们推荐更易于立即的构造函数中的初始化（这样你还可以做一些计算）

```
class Video extends React.Component{
  constructor(props){
    super(props);
    this.state={
      loopsRemaining: this.props.maxLoops,
    }
  }
}
```

### 7.把方法作为回调提供
> 很多习惯于ES6的用户反而不理解在ES5下可以这么做：

```
var MyApp=React.createClass({
  getInitialState:function(){
    return {
      text: "点我一下",
    };
  },
  handleOptionButtonClick:function(e){
    console.log("点击事件");
    console.log(this);
    this.state.text="我被点了一下";
    console.log(this.state);
  },
  render:function () {
    return(
      <View style={{flex: 1,justifyContent: 'center',alignItems: 'center',backgroundColor: '#F5FCFF'}} onPress={this.handleOptionButtonClick}>
        <Text onPress={this.handleOptionButtonClick}>{this.state.text}</Text>
      </View>
    )
  }
})
```

> 在ES5下，React.createClass会把所有的方法都bind一遍，这样可以提交到任意的地方作为回调函数，而this不会变化。但官方现在逐步认为这反而是不标准、不易理解的。

> 在ES6下，你需要通过bind来绑定this引用，或者使用箭头函数（它会绑定当前scope的this引用）来调用

```
class MyApp extends Component{
  state={
    text:'我需要被点一下'
  }
  handleOptionButtonClick(e){
      console.log(e);
      this.setState({
        text:'我又被点击了一下'
      })
  }
  render(){
    return(
      <View>
        <Text
         //任意一种都可以实现效果
         onPress={this.handleOptionButtonClick.bind(this)}
        //onPress={e=>this.handleOptionButtonClick(e)}
        >{this.state.text}</Text>
      </View>
    )
  }
}
```


> 箭头函数实际上是在这里定义了一个临时的函数，箭头函数的箭头=>之前是一个空括号、单个的参数名、或用括号括起的多个参数名，而箭头之后可以是一个表达式（作为函数的返回值），或者是用花括号括起的函数体（需要自行通过return来返回值，否则返回的是undefined）。

```
((a,b)=>a+b)(3,4)
//7
((a,b)=>{a+b})(3,4)
//undefined
```

需要注意的是，不论是bind还是箭头函数，每次被执行都返回的是一个新的函数引用，因此如果你还需要函数的引用去做一些别的事情（譬如卸载监听器），那么你必须自己保存这个引用

以后继续看的地方[地址](http://bbs.reactnative.cn/topic/15/react-react-native-%E7%9A%84es5-es6%E5%86%99%E6%B3%95%E5%AF%B9%E7%85%A7%E8%A1%A8/2)
>=====================================

```
// 错误的做法
class PauseMenu extends React.Component{
    componentWillMount(){
        AppStateIOS.addEventListener('change', this.onAppPaused.bind(this));
    }
    componentDidUnmount(){
        AppStateIOS.removeEventListener('change', this.onAppPaused.bind(this));
    }
    onAppPaused(event){
    }
}
// 正确的做法
class PauseMenu extends React.Component{
    constructor(props){
        super(props);
        this._onAppPaused = this.onAppPaused.bind(this);
    }
    componentWillMount(){
        AppStateIOS.addEventListener('change', this._onAppPaused);
    }
    componentDidUnmount(){
        AppStateIOS.removeEventListener('change', this._onAppPaused);
    }
    onAppPaused(event){
    }
}
```

从这个帖子中我们还学习到一种新的做法：

```
// 正确的做法
class PauseMenu extends React.Component{
    componentWillMount(){
        AppStateIOS.addEventListener('change', this.onAppPaused);
    }
    componentDidUnmount(){
        AppStateIOS.removeEventListener('change', this.onAppPaused);
    }
    onAppPaused = (event) => {
        //把方法直接作为一个arrow function的属性来定义，初始化的时候就绑定好了this指针
    }
}


```