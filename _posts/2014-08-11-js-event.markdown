---
layout:     post
title:      "JS 事件"
subtitle:   "JS 事件"
date:       2014-08-11
author:     "WYY"
header-img: "img/post-bg-js-version.jpg"
catalog: true
tags:
    - JavaScript
---




# 事件

### 事件的兼容信性

>- 在标准浏览器下，事件方法会默认给事件传递参数(firfox chrome,IE9以上)
>- 在非标准浏览器IE8 一下事件方法不会给事件的方法传递参数,这个时候我们需要通过后window.event 来进行获取信息。
> 兼容方法如下:

```
var oDiv = document.getElementById('box');
var oTxt = document.getElementById('txt');
oDiv.onclick=function(e){
    e=e||window.event;
    // clientX clientY 距离当前屏幕的 Left Top 值
    console.log('距离当前屏幕的',e.clientX,e.clientY);
    // 触发的行为类型
    console.log('触发的行为类型',e.type);
    // 当前的鼠标触发的元素,他的值就是哪个元素 IE8以下不兼容
    e.target=e.target||e.srcElement;
    console.log('当前的鼠标触发的元素',e.target);

    // 当前鼠标触发点距离body的左上角(页面第一屏幕的最左上端) IE8以下不兼容
    e.pageX=e.pageX|| (document.body || document.documentElement).scrollLeft + e.clientX;
    e.pageY=e.pageY|| (document.body || document.documentElement).scrollTop + e.clientX;
    console.log('距离页面第一屏幕的最左上端',e.pageX,e.pageY);

    // 阻止浏览器的默认行为 例如a 标签的跳转 IE8以下不兼容 ,需要的使用e.returnValue=false 来进行替代
    e.preventDefault?e.preventDefault : e.returnValuef=false;
    // 或者直接的
    // return false;
    // 停止冒泡传播
    e.stopPropagation?e.stopPropagation():e.cancelBubble();
}

oTxt.onkeyup=function(e){
    e=e||e.event;
    // 空格32 删除8 回车13 删除键 46 ← 37 ↑ 38 → 39 ↓ 40
    console.log(e.keyCode);
}
```

> 事件的传播机制
>>- 捕获阶段:从外向内一次查找元素
>>- 目标阶段:当前事件源本身的操作
>>- 冒泡阶段:从内到外一次触发相关的行为(最常用的就是冒泡阶段)。

>>- DOM0级绑定使用的是事件的冒泡机制。
>>- DOM2级绑定使用的是事件的捕获机制。

> 使用DOM0级进行绑定的时候，都是在事件的冒泡阶段进行执行的。以下使用DOM0级事件进行绑定。

```
var outer=document.getElementById('outer'),inner=document.getElementById('inner'),center=document.getElementById('center'),body=document.body;

outer.onclick=function(){

    console.log('outer');

}

inner.onclick=function(){

    console.log('inner');

}

center.onclick=function(){

    console.log('center');

}

body.onclick=function(){

    console.log('body');

}

```

> 使用DOM2级绑定可以，决定事件是通过捕获触发，还是冒泡触发

```
var outer=document.getElementById('outer'),inner=document.getElementById('inner'),center=document.getElementById('center'),body=document.body;

outer.addEventListener('click',function(){

    console.log('outer');
// 第三个参数true为 捕捉的时候触发，false为冒泡的时候触发。
},true);

inner.addEventListener('click',function(){

    console.log('inner');

},true);

center.addEventListener('click',function(){

    console.log('center');

},true);

body.addEventListener('click',function(){

    console.log('body');

},true);

```

> **标注浏览器下的DOM2级绑定**
> 同时DOM2 可一个给一个事件，重复绑定多次，但是DOM零级只能绑定一次。
> 移除DOM2 绑定的时候，需要保证三个参数，行为，方法，阶段全部匹配，一点都不能差。所以绑定的时候，需要绑定实名函数，不要绑定匿名函数，不然不能够移除，这种属性。同时相同的行为绑定相同的命名函数两次的时候，只能绑定一个方法。
> 执行的顺序是根据绑定的先后顺序执行的。
> 绑定方法中this 是绑定事件的DOM
> 事件池是存储绑定行为方法的容量。

> **IE6-8下的DOM2级绑定**
> 上面的DOM2级绑定只能适用于标准浏览器，在IE6-8 下使用另外的方法的进行绑定
> **addEventListener/removeEventListener**  **attachEvent/detachEvent**,同时IE6-8 中的绑定只支持两个参数，绑定的行为，和执行方法，默认的是冒泡排序的,同时第一个行为的名称前面需要添加on，
this执行的window 而不是DOM本身



Type | 标准浏览器 | IE6-8
---|---|---
方法的绑定移除 | addEventListener/removeEventListener | attachEvent/detachEvent
执行的顺序 | 绑定的顺序 | 混乱
重复绑定 | 相同事件，相同的触发模式不能绑定相同的实名方法 | 相同事件，相同的触发模式可以绑定相同的实名方法
this | 绑定事件的DOM | window
触发模式 | 第三个参数false冒泡,ture捕获 | 只有两个参数不支持捕获触发

